https://practice.geeksforgeeks.org/problems/subset-sums2234/1

Expected Time Complexity: O(2^N)
Expected Auxiliary Space: O(2^N)

//{ Driver Code Starts
#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
class Solution
{
public:

    void findSubsetSum(int idx, int N, int sum, vector<int> &arr, vector<int> &sumSubset){
        if(idx == N){
            sumSubset.push_back(sum);
            return;
        }
        
        //pick the element
        findSubsetSum(idx + 1, N, sum + arr[idx], arr, sumSubset);
        
        //not pick the element
        findSubsetSum(idx + 1, N, sum, arr, sumSubset);
        
    }
    
    
    
    
    vector<int> subsetSums(vector<int> arr, int N)
    {
        
        vector<int> sumSubset;
        sort(arr.begin(), arr.end());
        findSubsetSum(0, N, 0, arr, sumSubset);
        return sumSubset;
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int N;
        cin>>N;
        vector<int> arr(N);
        for(int i = 0 ; i < N ; i++){
            cin >> arr[i];
        }
        Solution ob;
        vector<int> ans = ob.subsetSums(arr,N);
        sort(ans.begin(),ans.end());
        for(auto sum : ans){
            cout<< sum<<" ";
        }
        cout<<endl;
    }
    return 0;
}
// } Driver Code Ends

https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

TC: O(4^(m+n))
SC: O(m+n)

Approach-1:

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

// DLRU

class Solution{
    public:
    void solve(int i, int j, string move, vector<vector<int>> &vis, vector<string> &ans, vector<vector<int>> &m, int n){
        
        //Base case
        if(i == n-1 && j == n-1){
            ans.push_back(move);
            return;
        }
        
        //Downward
        if(i+1 < n && !vis[i+1][j] && m[i+1][j] == 1){
            vis[i][j] = 1;
            solve(i+1, j, move + 'D', vis, ans, m, n);
            vis[i][j] = 0;
        }
        
        //Left
         if(j-1 >= 0 && !vis[i][j-1] && m[i][j-1] == 1){
            vis[i][j] = 1;
            solve(i, j-1, move + 'L', vis, ans, m, n);
            vis[i][j] = 0;
        }
        
        //Right
         if(j+1 < n && !vis[i][j+1] && m[i][j+1] == 1){
            vis[i][j] = 1;
            solve(i, j+1, move + 'R', vis, ans, m, n);
            vis[i][j] = 0;
        }
        //Up
        if(i-1 >= 0 && !vis[i-1][j] && m[i-1][j] == 1){
            vis[i][j] = 1;
            solve(i-1, j, move + 'U', vis, ans, m, n);
            vis[i][j] = 0;
        }
        
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> vis(n, vector<int>(n, 0));
        if(m[0][0] == 1) solve(0, 0, "",vis, ans, m, n);
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends

=====================================================================================================================================
Approach-2

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

// DLRU

class Solution{
    public:
    void solve(int i, int j, string move, vector<vector<int>> &vis, vector<string> &ans, vector<vector<int>> &m, int n, int di[], int dj[]){
        
        //Base case
        if(i == n-1 && j == n-1){
            ans.push_back(move);
            return;
        }
        
        string dir = "DLRU";
        for(int ind = 0; ind < 4; ind++){
            int nexti = i + di[ind];
            int nextj = j + dj[ind];
            if(nexti >= 0 && nextj >= 0 && nexti < n && nextj < n && !vis[nexti][nextj] && m[nexti][nextj] == 1){
                vis[i][j] = 1;
                solve(nexti, nextj, move + dir[ind], vis, ans, m, n, di, dj);
                vis[i][j] = 0;
            }
        }
        
      
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> vis(n, vector<int>(n, 0));
        int di[] = {+1, 0, 0, -1};
        int dj[] = {0, -1, +1, 0};
        if(m[0][0] == 1) solve(0, 0, "",vis, ans, m, n, di, dj);
        return ans;
    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends

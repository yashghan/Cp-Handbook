https://leetcode.com/problems/network-delay-time/

class Solution {
public:
//     Dijkstras algorithm to create Minimumtime array from source node k to all other n-1 nodes
    
    // times[i] = (ui, vi, wi)
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        // vector<pair<int, int>> g[n+1];
        vector<vector<pair<int,int>>> g(105);
        
        for(int i = 0; i < times.size(); i++){
            g[times[i][0]].push_back({times[i][1], times[i][2]});
            // g[times[i][1]].push_back({times[i][0], times[i][2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> distTo(105, INT_MAX);
        // vector<int> vis(n+1, 0);
        distTo[k] = 0;
        pq.push({distTo[k], k});
        
        while(!pq.empty()){
            
            int prev_dist = pq.top().first;
            int prev_node = pq.top().second;
            // vis[prev] = 1;
            pq.pop();
            
            for(auto it: g[prev_node]){
                int next_node = it.first;
                int next_dist = it.second;
                
                // if(vis[next] != 1){  //not visited
                if(distTo[next_node] > distTo[prev_node] + next_dist){
                    distTo[next_node] = distTo[prev_node] + next_dist;
                    pq.push({distTo[next_node], next_node});
                }
                    // vis[next] = 1;
                // }
                // else{
                //     continue;
                // }
            }
        }
        int maxTime = INT_MIN;
        for(int i = 1; i <= n; i++){
            if(i != k && distTo[i] == INT_MAX) return -1;
            maxTime = max(maxTime, distTo[i]);
        }
//         for(int i = 1; i <= n; i++){
//             cout << distTo[i] << " ";
//         }
        
        return maxTime;
    }
};

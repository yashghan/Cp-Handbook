https://leetcode.com/problems/min-cost-to-connect-all-points/

TC: n^2 log n 
SC: 3 * O(n)

class Solution {
public:
    
    
void makeSet(vector<int> &parent, vector<int> &rank, int n){
    for(int i = 0; i <= n; i++){
        rank[i] = 0;
        parent[i] = i;
    }
}

int findParent(vector<int> &parent, int node){
    if(parent[node] == node){
        return node;
    }
    return parent[node] = findParent(parent, parent[node]);
}

void unionSet(int u, int v, vector<int> &parent, vector<int> &rank){
    u = findParent(parent, u);
    v = findParent(parent, v);
    
    if(rank[u] < rank[v]){
        parent[u] = v;
    }
    else if(rank[v] < rank[u]){
        parent[v] = u;
    }
    else{
        parent[u] = v;
        rank[u]++;
    }
}
    static bool comp(pair<int, pair<int, int>> &p1, pair<int, pair<int, int>> &p2){
        return p1. first < p2.first;
    }
    
    int minCostConnectPoints(vector<vector<int>>& points) {
        
        int n = points.size();
        vector<int> parent(n+1);
        vector<int> rank(n+1);
        makeSet(parent, rank, n);
        
        vector<pair<int, pair<int, int>>> ds;
        int val = 0;
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                val = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]); 
                ds.push_back({val, {i, j}});
            }
        }
        
        sort(ds.begin(), ds.end(), comp);
        
        pair<int, pair<int, int>> temp;
        int ds_size = ds.size();
        int count = 0;
        int minCost = 0;
        if(ds_size == 1){
            return ds[0].first;
        }
        int u, v;
        int pu = 0, pv = 0;
        
        for(int i = 0; i < ds_size; i++){
            temp = ds[i];
            u = temp.second.first;
            v = temp.second.second;
            val = temp.first;
            
            pu = findParent(parent, u);
            pv = findParent(parent, v);
            
            if(pv != pu){
                minCost += val;
                count++;
                unionSet(pu, pv , parent, rank);
                if(count == ds_size - 1){
                    break;
                }
            }
            else{
                continue;
            }
        }
        
        return minCost;
    }
};

https://www.codingninjas.com/codestudio/problems/minimum-spanning-tree_631769?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar

#include <bits/stdc++.h>


class DSU{
	vector<int> parent,size;

	public:
	DSU(int n){
		parent.resize(n);
		size.resize(n,1);
		for(int i=0; i<n; i++)
			parent[i]= i;
	}

	int findParent(int x){
		if(x == parent[x])
			return x;
		return parent[x]= findParent(parent[x]);
	}

	void unite(int small, int large){
		small = findParent(small);
		large = findParent(large);
		if(small == large)
			return;
		if(size[small] > size[large])
			swap(small,large);

		size[large] += size[small];
		parent[small]= large;
	}
};

//comparator
bool cmp(vector<int> &a, vector<int> &b){
    return a[2] < b[2];
}


int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
    DSU dsu(n);
    int minwt = 0;
    sort(edges.begin(), edges.end(), cmp);
    
    for(int i = 0; i < edges.size(); i++){
        int u = dsu.findParent(edges[i][0]);
        int v = dsu.findParent(edges[i][1]);
        int wt = edges[i][2];
        
        if(u != v){
            minwt += wt;
            dsu.unite(u, v);
        }
    }
    return minwt;
}

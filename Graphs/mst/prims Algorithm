https://www.codingninjas.com/codestudio/problems/prim-s-mst_1095633?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar

TC: O(n^2)

#include <bits/stdc++.h>

vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // create adj list 
    vector<pair<int, int>> adj[5000];
    for(int i = 0; i < g.size(); i++){
        int u = g[i].first.first;
        int v = g[i].first.second;
        int w = g[i].second; 
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
     vector<int> key(n+1);
     vector<bool> mst(n+1);
     vector<int> parent(n+1);
    
    //Initialise
    for(int i = 0; i <= n; i++){
        key[i] = INT_MAX;
        mst[i] = false;
        parent[i] = -1;
        
    }
    
    //Let's start the algo
    key[1] = 0;
    parent[1] = -1;
    
    for(int i = 2; i <= n; i++){
        int mini = INT_MAX;
        int u;
        
        for(int v = 1; v <= n; v++){
            if(mst[v] == false && key[v] < mini){
                u = v;
                mini = key[v];
            }
        }
        
        //mark min node as true
        mst[u] = true;
        
//         check it's adjacent nodes
        for(auto it: adj[u]){
            int v = it.first;
            int w = it.second;
            if(mst[v] == false && w < key[v]){
                parent[v] = u;
                key[v] = w;
            }
        }
    }
    vector<pair<pair<int, int>, int>> result;
    for(int i = 2; i <= n; i++){
        result.push_back({{parent[i], i}, key[i]});
    }
    
    return result;
}

//Approach - 2
TC: o(NlogN)

#include <bits/stdc++.h>

vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // create adj list 
    vector<pair<int, int>> adj[5000];
    for(int i = 0; i < g.size(); i++){
        int u = g[i].first.first;
        int v = g[i].first.second;
        int w = g[i].second;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }
    
    vector<int> key(n+1);
    vector<int> mst(n+1);
    vector<int> parent(n+1);
    priority_queue<pair<int,int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    
    for(int i = 0; i <= n; i++){
        key[i] = INT_MAX;
        mst[i] = false;
        parent[i] = -1;
    }
    parent[1] = -1;
    key[1] = 0;
    pq.push({0, 1});
    
    while(!pq.empty()){
//         int mini = INT_MAX;
        int u = pq.top().second;
        pq.pop();
        //find min node
//         for(int v = 1; v <= n; v++){
//             if(mst[v] == false && key[v] < mini){
//                 u = v;
//                 mini = key[v];
                
//             }
//         }
        //mark min node as true
        mst[u] = true;
        for(auto it: adj[u]){
            int v = it.first;
            int wt = it.second;
            if(mst[v] == false && wt < key[v]){
                parent[v] = u;
                key[v] = wt;
                pq.push({key[v], v});     
            }
        }
    }
    vector<pair<pair<int, int>, int>> result;
    for(int i = 2; i <= n; i++){
        result.push_back({{parent[i], i}, key[i]});
    }
    
    return result;
   
}

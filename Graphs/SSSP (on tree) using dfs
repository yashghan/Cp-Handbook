Single Source Shortest Path (on tree) using dfs 
Code:

#include <bits/stdc++.h>
using namespace std;

int vis[1001];
int dist[1001];
vector<int> adj[1001];

void dfs(int v, int d){
    vis[v] = 1;
    dist[v] = d;
    
    for(int child: adj[v]){
        if(vis[child] == 0){
            dfs(child, dist[v] + 1);
        }
    }
}


int main(){

  #ifndef ONLINE_JUDGE
  freopen("Error.txt", "w", stderr);
  #endif

  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif

    int n;
    cin >> n;

    int v1, v2;
    for(int i = 0; i < n; i++){
        cin >> v1 >> v2;
        adj[v1].push_back(v2);
        adj[v2].push_back(v1);
    }
    for(int i = 1; i <= n; i++){
        if(!vis[i]){
            dfs(i, 0);
        }
    }
    for(int i = 1; i <= 6; i++){
        cout << dist[i] << " ";
    }
    
    return 0;
}

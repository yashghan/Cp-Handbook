This type of BFS is used to find the shortest distance between two nodes in a graph provided that the edges in the graph have the weights 0 or 1.

void bfs(int start)
{
  deque<int> Q; // Double-ended queue
  Q.push_back(start);
  distance[start] = 0;
  while (!Q.empty())
  {
    int v = Q.front();
    Q.pop_front();
    for (auto it: edges[v])
    {

      /* if distance of neighbour of v from start node is greater than sum of distance of v from start node and edge weight between v and its neighbour (distance between v and its neighbour of v) ,then change it */

      if (distance[it.first] > distance[v] + it.second)
      {

        distance[it.first] = distance[v] + it.second;

        /*if edge weight between v and its neighbour is 0 then push it to front of
double ended queue else push it to back*/

        if (it.second == 0)
        {
          Q.push_front(it.first);
        }
        else
        {
          Q.push_back(it.first);
        }
      }
    }
  }
}

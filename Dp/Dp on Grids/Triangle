https://www.codingninjas.com/codestudio/problems/triangle_1229398?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0

Memoization:
TC: O(n*n) + O(n)
SC: O(n * n)

int f(int i, int j, vector<vector<int>>& triangle, int n, vector<vector<int>> &dp){
    if(i == n-1){
        return triangle[n-1][j];
    }
    if(dp[i][j] != -1) return dp[i][j];
    int d = triangle[i][j] + f(i+1, j, triangle, n, dp);
    int dg = triangle[i][j] + f(i+1, j+1, triangle, n, dp);
    return dp[i][j] = min(d, dg);
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
    vector<vector<int>> dp(n, vector<int> (n, -1));
  	return f(0,0,triangle,n, dp);
}

Method 2 - Tabulation
TC: O(n*n)
SC: O(n * n)

int minimumPathSum(vector<vector<int>>& triangle, int n){
    vector<vector<int>> dp(n, vector<int> (n, 0));
// 	return f(0,0,triangle,n, dp);
    for(int j = n-1; j >= 0; j--){
        dp[n-1][j] = triangle[n-1][j];
    }
    for(int i = n-2; i >= 0; i--){
        for(int j = i; j >= 0; j--){
            int d = triangle[i][j] + dp[i+1][j];
            int dg = triangle[i][j] + dp[i+1][j+1];
            dp[i][j] = min(d, dg);
        }
    }
    return dp[0][0];
}

Space Optimised:
TC: O(n*n)
SC: O(n)

int minimumPathSum(vector<vector<int>>& triangle, int n){
//     vector<vector<int>> dp(n, vector<int> (n, 0));
    vector<int> dp(n, 0);
// 	return f(0,0,triangle,n, dp);
    for(int j = n-1; j >= 0; j--){
        dp[j] = triangle[n-1][j];
    }
    for(int i = n-2; i >= 0; i--){
        vector<int> cur(n, 0);
        for(int j = i; j >= 0; j--){
            int d = triangle[i][j] + dp[j];
            int dg = triangle[i][j] + dp[j+1];
            cur[j] = min(d, dg);
        }
        dp = cur;
    }
    return dp[0];
}




https://leetcode.com/problems/house-robber-ii/

class Solution {
public:
    
    int findMaxSum(vector<int> &arr) {
        int n = arr.size();
	    vector<int> dp(n, 0);
	    
	    int prev = arr[0];
	    int prev2 = 0;
       
        
        for(int i = 1; i < n; i++){
            int Take = arr[i];
            if(i > 1){
                Take += prev2;
            }
            int notTake = prev;
            
            int curri = max(Take, notTake);
            
            prev2 = prev;
            prev = curri;
            
        }    
    
        return prev;
	}
    
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> temp1, temp2;
        if(n == 1) return nums[0];
        for(int i = 0; i < n; i++){
            if(i != 0){
                temp1.push_back(nums[i]);
            }
            if(i != n-1){
                temp2.push_back(nums[i]);
            }
        }
        return max(findMaxSum(temp1), findMaxSum(temp2));
    }
};

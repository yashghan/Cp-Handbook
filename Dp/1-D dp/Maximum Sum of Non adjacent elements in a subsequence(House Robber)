https://practice.geeksforgeeks.org/problems/max-sum-without-adjacents2430/1

TC: O(n)
SC: O(n) + O(n)

//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
//User function template for C++
class Solution{
public:	

    int f(int idx, int *arr, vector<int> &dp){
        
        if(idx == 0) return arr[idx];
        if(idx < 0) return 0;
        if(dp[idx] != -1) return dp[idx];
        
        int Pick = arr[idx] + f(idx - 2, arr, dp);
        int notPick = f(idx - 1, arr, dp);
        
        return dp[idx] = max(Pick, notPick);
    }
    
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    vector<int> dp(n, -1);
	    return f(n-1, arr, dp);
	}
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.findMaxSum(arr, n);
        cout << ans << "\n";
    }
    return 0;
}
// } Driver Code Ends


Bottom up dp/ Tabulation:
TC: O(n) 
SC: O(n)

class Solution{
public:	

	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    vector<int> dp(n, 0);
	    
	    dp[0] = arr[0];
       
        
        for(int i = 1; i < n; i++){
            int Take = arr[i];
            if(i > 1){
                Take += dp[i-2];
            }
            int notTake = dp[i-1];
            
            dp[i] = max(Take, notTake);
            
           
        }
       
        
        return dp[n-1];
	}
};

Space Optimisation:

TC: O(n)
SC: O(1)

class Solution{
public:	

	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    vector<int> dp(n, 0);
	    
	    int prev = arr[0];
	    int prev2 = 0;
       
        
        for(int i = 1; i < n; i++){
            int Take = arr[i];
            if(i > 1){
                Take += prev2;
            }
            int notTake = prev;
            
            int curri = max(Take, notTake);
            
            prev2 = prev;
            prev = curri;
            
        }    
    
        return prev;
	}
};

